package robotname

import (
	"crypto/rand"
	"fmt"
)

const maxNamespace = 26 * 26 * 10 * 10 * 10

var nameMap = make(map[string]int)

// Robot as a string alias
type Robot struct {
	RobotName string
}

// Name returns the random name of robot
// random name generated by crypto/rand pkg
func (r *Robot) Name() (string, error) {
	if len(nameMap) == maxNamespace {
		return "", fmt.Errorf("Namespace exhausted completely, allowed unique names %d", maxNamespace)
	}

	if r.RobotName != "" {
		return r.RobotName, nil
	}
	var name string
	name, err := generateRandomName()

	if err != nil {
		return "", err
	}
	// check if name already exist for any robot
	// if yes then retry creating unique name
	if _, nameExists := nameMap[name]; nameExists {
		for {
			name, err = generateRandomName()
			if err != nil {
				return "", err
			}
			if _, nameExists = nameMap[name]; !nameExists {
				break
			}
		}
	}

	nameMap[name] = 0

	r.RobotName = name

	return name, nil
}

// Reset factory resets the robot name to
// empty string, for creating new name use r.Name()
func (r *Robot) Reset() {
	r.RobotName = ""
}

/************* helper methods ************
Thanks to -
https://gist.githubusercontent.com/schollz/156d608e8ec26816cedaf06f14d7d692/raw/3ddd0924b2668483eb39fbf0b76ea3dd93cd8ed8/main.go

helpers are modified to satidfy requirements of the task
*/

func generateRandomName() (string, error) {
	letters, err := generateRandomString(2)
	if err != nil {
		return "", err
	}
	ints, err := generateRandomInt(3)
	if err != nil {
		return "", err
	}

	name := letters + ints

	return name, nil
}

func generateRandomBytes(n int) ([]byte, error) {
	b := make([]byte, n)
	_, err := rand.Read(b)
	// Note that err == nil only if we read len(b) bytes.
	if err != nil {
		return nil, err
	}

	return b, nil
}

func generateRandomString(n int) (string, error) {
	const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	bytes, err := generateRandomBytes(n)
	if err != nil {
		return "", err
	}
	for i, b := range bytes {
		bytes[i] = letters[b%byte(len(letters))]
	}
	return string(bytes), nil
}

func generateRandomInt(n int) (string, error) {
	const ints = "0123456789"
	bytes, err := generateRandomBytes(n)
	if err != nil {
		return "", err
	}
	for i, b := range bytes {
		bytes[i] = ints[b%byte(len(ints))]
	}
	return string(bytes), nil
}
